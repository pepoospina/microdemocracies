{
  "address": "0xF9415f121F91aceA937Ffb566F3aAc02eb55b23B",
  "abi": [
    {
      "inputs": [],
      "name": "AccountAlreadyOwnsOneToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CantChallengeInvalidAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallangeAlreadyActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorAccountNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorAccountSolidified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorAlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorChallangeAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorChallangeNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorVoteNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorVoteOnOwnChallenge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorVoterCantVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorVoterValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorVotingPeriodEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorVoucherIsValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorVoucherNotValid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedExecutedCondition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VoucherNoLongerInvalid",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int8",
          "name": "outcome",
          "type": "int8"
        }
      ],
      "name": "ChallengeExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidatedAccountEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidatedByChallenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidatedByInvalidVoucher",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "voterTokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidatedVoteEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "voterTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int8",
          "name": "vote",
          "type": "int8"
        }
      ],
      "name": "VoteEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEndDate",
          "type": "uint256"
        }
      ],
      "name": "VotingPeriodExtendedEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "personCid",
          "type": "string"
        }
      ],
      "name": "VouchEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FOUNDERS_VOUCHER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENDING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUIET_ENDING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nEntries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "voterTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "challengedTokenId",
          "type": "uint256"
        }
      ],
      "name": "canVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "executeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAccount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "voucher",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "valid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timesChallenged",
              "type": "uint256"
            }
          ],
          "internalType": "struct Registry.Account",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creationDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "int8",
          "name": "lastOutcome",
          "type": "int8"
        },
        {
          "internalType": "uint256",
          "name": "nVoted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nFor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voterTokenId",
          "type": "uint256"
        }
      ],
      "name": "getChallengeVote",
      "outputs": [
        {
          "internalType": "int8",
          "name": "",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "challengeIndex",
          "type": "uint256"
        }
      ],
      "name": "getSpecificChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creationDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "int8",
          "name": "lastOutcome",
          "type": "int8"
        },
        {
          "internalType": "uint256",
          "name": "nVoted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nFor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voterTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "challengeIndex",
          "type": "uint256"
        }
      ],
      "name": "getSpecificChallengeVote",
      "outputs": [
        {
          "internalType": "int8",
          "name": "",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenPersonCid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenVouch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "personCid",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vouchDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct Registry.Vouch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTotalVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "voucherTokenId",
          "type": "uint256"
        }
      ],
      "name": "getVoucherVouchesNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "__symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "__name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "foundersCids",
          "type": "string[]"
        }
      ],
      "name": "initRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "invalidateInvalidVoucher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voterTokenId",
          "type": "uint256"
        }
      ],
      "name": "invalidateVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isSolidified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokenIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "int8",
          "name": "_vote",
          "type": "int8"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "personCid",
          "type": "string"
        }
      ],
      "name": "vouch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f920c847cfdc9bc713dce4a8d23005120669dd0a006a1b07108c895d883dfd3",
  "receipt": {
    "to": null,
    "from": "0xFfEB3c7bE84527a44349aFD421dC5a1834DBAa1D",
    "contractAddress": "0xF9415f121F91aceA937Ffb566F3aAc02eb55b23B",
    "transactionIndex": 89,
    "gasUsed": "2018615",
    "logsBloom": "0x
    "blockHash": "0x04b18470fc7ae465771336e3a4c910c60e7d51cbb572d953f0d655b16a3344e0",
    "transactionHash": "0x6f920c847cfdc9bc713dce4a8d23005120669dd0a006a1b07108c895d883dfd3",
    "logs": [],
    "blockNumber": 9989151,
    "cumulativeGasUsed": "12924032",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7a5b3db0f6f27b20ad8b62fcee2d804a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountAlreadyOwnsOneToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantChallengeInvalidAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallangeAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorAccountNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorAccountSolidified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorAlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorChallangeAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorChallangeNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorVoteNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorVoteOnOwnChallenge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorVoterCantVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorVoterValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorVotingPeriodEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorVoucherIsValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorVoucherNotValid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedExecutedCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoucherNoLongerInvalid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"outcome\",\"type\":\"int8\"}],\"name\":\"ChallengeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidatedAccountEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidatedByChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidatedByInvalidVoucher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voterTokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidatedVoteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voterTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"vote\",\"type\":\"int8\"}],\"name\":\"VoteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodExtendedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"personCid\",\"type\":\"string\"}],\"name\":\"VouchEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FOUNDERS_VOUCHER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENDING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUIET_ENDING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengedTokenId\",\"type\":\"uint256\"}],\"name\":\"canVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"executeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voucher\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timesChallenged\",\"type\":\"uint256\"}],\"internalType\":\"struct Registry.Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"lastOutcome\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"nVoted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nFor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voterTokenId\",\"type\":\"uint256\"}],\"name\":\"getChallengeVote\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"}],\"name\":\"getSpecificChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"lastOutcome\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"nVoted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nFor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voterTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"}],\"name\":\"getSpecificChallengeVote\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenPersonCid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenVouch\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"personCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vouchDate\",\"type\":\"uint256\"}],\"internalType\":\"struct Registry.Vouch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voucherTokenId\",\"type\":\"uint256\"}],\"name\":\"getVoucherVouchesNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"foundersCids\",\"type\":\"string[]\"}],\"name\":\"initRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"invalidateInvalidVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voterTokenId\",\"type\":\"uint256\"}],\"name\":\"invalidateVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isSolidified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"_vote\",\"type\":\"int8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"personCid\",\"type\":\"string\"}],\"name\":\"vouch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"Registry\",\"version\":1},\"userdoc\":{\"errors\":{\"ErrorAccountSolidified()\":[{\"notice\":\"Errors \"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"canVote(uint256,uint256)\":{\"notice\":\"A tokenId can vote if - The voter account is valid - AND either - voterTokenId was vouched by voucherTokenId (which is the voucher of the challenged tokenId) - OR the voterTokenId is the voucherTokenId themselves.  The FOUNDERS_VOUCHER can, in theory vote on founders challenges, but no address owns that  token and so no problem \"},\"initRegistry(string,string,address[],string[])\":{\"notice\":\"Constructor \"},\"vouch(address,string)\":{\"notice\":\"The msgSender must be a valid account in the registry and vouch for the provided account and personCid pair\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Registry\\n */\\n\\ncontract Registry is Context, IERC721, IERC721Metadata, Initializable {\\n    using PRBMathUD60x18 for uint256;\\n\\n    uint256 public constant PENDING_PERIOD = 180 days;\\n    uint256 public constant VOTING_PERIOD = 15 days;\\n    uint256 public constant QUIET_ENDING_PERIOD = 2 days;\\n\\n    uint256 public constant FOUNDERS_VOUCHER = type(uint256).max;\\n    string internal constant baseURI = \\\"ipfs://\\\";\\n    string internal _symbol;\\n    string internal _name;\\n\\n    struct Vouch {\\n        string personCid;\\n        uint256 vouchDate;\\n    }\\n\\n    struct Vouches {\\n        uint256 number;\\n        mapping(uint256 => Vouch) vouches;\\n    }\\n\\n    struct Account {\\n        address account;    \\n        uint256 voucher;\\n        bool valid;\\n        uint256 timesChallenged;\\n    }\\n\\n    struct Challenge {\\n        bool executed;\\n        int8 lastOutcome;\\n        uint256 creationDate;\\n        uint256 endDate;\\n        mapping(uint256 => int8) votes;\\n        uint256 nVoted;\\n        uint256 nFor;\\n    }\\n\\n    mapping(uint256 => Vouches) vouches;\\n\\n    /** \\n     * two mappings hold the address to token id relationship,\\n     * but this is a one-to-one relationship. TokenIds\\n     * are preferred as they can be memorized by users.\\n     */\\n    mapping(uint256 => Account) accounts;\\n    mapping(address => uint256) owned;\\n\\n    mapping(uint256 => Challenge[]) challenges;\\n\\n    uint256 __totalSupply; // sum of currenlty valid accounts\\n    uint256 public _nEntries; // sequential number that increments with every vouch (and gives the tokenId)\\n\\n    event VouchEvent(uint256 indexed from, uint256 indexed to, string personCid);\\n    event InvalidatedAccountEvent(uint256 indexed tokenId);\\n    event InvalidatedByChallenge(uint256 indexed tokenId);\\n    event InvalidatedByInvalidVoucher(uint256 indexed tokenId);\\n\\n    event ChallengeEvent(uint256 indexed tokenId);\\n    event ChallengeExecuted(uint256 tokenId, int8 outcome);        \\n    event VoteEvent(uint256 indexed voterTokenId, uint256 tokenId, int8 vote);\\n    event InvalidatedVoteEvent(uint256 indexed tokenId, uint256 indexed voterTokenId);\\n    event VotingPeriodExtendedEvent(uint256 newEndDate);\\n\\n    /** Errors */\\n    error ErrorAccountSolidified();\\n    error CantChallengeInvalidAccount();\\n    error ChallangeAlreadyActive();    \\n    error ErrorVoteOnOwnChallenge();\\n    error ErrorChallangeAlreadyExecuted();\\n    error ErrorChallangeNotActive();\\n    error ErrorVotingPeriodEnded();\\n    error ErrorVoterCantVote();\\n    error ErrorAlreadyVoted();\\n    error ErrorVoucherIsValid();\\n    error ErrorVoucherNotValid();\\n    error ErrorAccountNotValid();\\n    error ErrorVoteNotFound();\\n    error ErrorVoterValid();\\n    error VoucherNoLongerInvalid();\\n    error AccountAlreadyOwnsOneToken();\\n    error UnexpectedExecutedCondition();\\n\\n    /** Constructor */\\n    function initRegistry (string memory __symbol, string memory __name, address[] memory addresses, string[] memory foundersCids) external initializer {\\n        _symbol = __symbol;\\n        _name = __name;\\n        __totalSupply = 0;\\n        _nEntries = 0;\\n\\n        for (uint8 ix = 0; ix < addresses.length; ix++) {\\n            /** special case of founder vouchers being a dumb token ID */\\n            accounts[FOUNDERS_VOUCHER].valid = true;\\n            _vouch(FOUNDERS_VOUCHER, addresses[ix], foundersCids[ix]);\\n        }\\n    }\\n\\n    /***************\\n    EXTERNAL FUNCTIONS\\n    ***************/\\n    /** \\n     * The msgSender must be a valid account in the registry and vouch\\n     * for the provided account and personCid pair\\n     */\\n    function vouch(address account, string calldata personCid) external {\\n        uint256 vouchTokenId = _tokenIdOf(_msgSender());\\n        _vouch(vouchTokenId, account, personCid);\\n    }\\n\\n    function getCurrentChallenge(uint256 _tokenId) internal returns (Challenge storage) {\\n        uint256 timesChallenged = accounts[_tokenId].timesChallenged;\\n        \\n        if (challenges[_tokenId].length != timesChallenged + 1) {\\n            /** the currentChallenge must be the last challenge in the array, \\n             * the first time is read it does not exist so we create it */\\n            challenges[_tokenId].push();\\n        }\\n        \\n        return challenges[_tokenId][timesChallenged];\\n    }\\n\\n    function challenge(uint256 _tokenId) external {\\n        if(isSolidified(_tokenId)) {\\n            revert ErrorAccountSolidified();\\n        }\\n\\n        if(!accounts[_tokenId].valid) {\\n            revert CantChallengeInvalidAccount();\\n        }\\n\\n        Challenge storage _challenge = getCurrentChallenge(_tokenId);\\n        if(_challenge.creationDate > 0) revert ChallangeAlreadyActive();\\n        if(_challenge.executed) revert UnexpectedExecutedCondition();\\n\\n        _challenge.creationDate = block.timestamp;\\n        _challenge.endDate = block.timestamp + VOTING_PERIOD;\\n        _challenge.lastOutcome = -1;\\n\\n        emit ChallengeEvent(_tokenId);\\n    }\\n\\n    function vote(uint256 _tokenId, int8 _vote) external {\\n        uint256 voterTokenId = _tokenIdOf(_msgSender());\\n        Challenge storage _challenge = getCurrentChallenge(_tokenId);\\n        \\n        if(_challenge.creationDate == 0) revert ErrorChallangeNotActive();\\n        if(_challenge.executed) revert ErrorChallangeAlreadyExecuted();\\n        if(block.timestamp > _challenge.endDate) revert ErrorVotingPeriodEnded();\\n        if(!canVote(voterTokenId, _tokenId)) revert ErrorVoterCantVote();\\n        if(_challenge.votes[voterTokenId] != 0) revert ErrorAlreadyVoted();\\n\\n        _challenge.votes[voterTokenId] = _vote == 1 ? int8(1) : int8(-1);\\n        _challenge.nVoted += 1;\\n        _challenge.nFor += _vote == 1 ? 1 : 0;\\n\\n        emit VoteEvent(voterTokenId, _tokenId, _vote);\\n\\n        _executeVote(_challenge, _tokenId);\\n    }\\n\\n    function executeVote(uint256 _tokenId) external {\\n        Challenge storage _challenge = getCurrentChallenge(_tokenId);\\n        _executeVote(_challenge, _tokenId);\\n    }\\n\\n    function invalidateInvalidVoucher(uint256 tokenId) external {\\n        uint256 voucherTokenId = accounts[tokenId].voucher;\\n        if(accounts[voucherTokenId].valid) revert ErrorVoucherIsValid();\\n\\n        emit InvalidatedByInvalidVoucher(tokenId);\\n        _invalidateAccount(tokenId);\\n    }\\n\\n    function invalidateVote(uint256 _tokenId, uint256 _voterTokenId) external {\\n        Challenge storage _challenge = getCurrentChallenge(_tokenId);\\n        _invalidateVote(_tokenId, _challenge, _voterTokenId);\\n    }\\n\\n    /***************\\n    VIEW FUNCTIONS\\n    ***************/\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    function _totalSupply() internal view returns (uint256) {\\n        return __totalSupply;\\n    }\\n\\n    function getTokenPersonCid(uint256 tokenId) public view returns (string memory) {\\n        uint256 voucherTokenId = accounts[tokenId].voucher;\\n        return vouches[voucherTokenId].vouches[tokenId].personCid;\\n    }\\n\\n    function getTotalVoters(uint256 _tokenId) public view returns (uint256) {\\n        uint256 voucherTokenId = accounts[_tokenId].voucher;\\n        Vouches storage _vouches = vouches[voucherTokenId];\\n\\n        /**\\n         * The number of vouches for valid accounts minus the voted account plus the voucher\\n         * number = _vouches.number - 1 + 1\\n         */\\n        uint256 number = _vouches.number;\\n\\n        /** special case for the founder accounts where the voucher cannot vote */\\n        if (voucherTokenId == FOUNDERS_VOUCHER) {\\n            number = _vouches.number - 1;\\n        }\\n\\n        return number;\\n    }\\n\\n    /** \\n     * A tokenId can vote if\\n     * - The voter account is valid\\n     * - AND either\\n     * - voterTokenId was vouched by voucherTokenId (which is the voucher of the challenged tokenId)\\n     * - OR the voterTokenId is the voucherTokenId themselves.\\n     * \\n     * The FOUNDERS_VOUCHER can, in theory vote on founders challenges, but no address owns that \\n     * token and so no problem\\n     * */\\n    function canVote(uint256 voterTokenId, uint256 challengedTokenId) public view returns (bool) {\\n        if (voterTokenId == challengedTokenId) return false;\\n        if (voterTokenId == 0) return false;\\n\\n        uint256 voucherTokenId = accounts[challengedTokenId].voucher;\\n        if(!accounts[voucherTokenId].valid) revert VoucherNoLongerInvalid();\\n\\n        bool isInCircle = accounts[voterTokenId].voucher == voucherTokenId || voterTokenId == voucherTokenId;\\n\\n        if (accounts[voterTokenId].valid && isInCircle) return true;\\n        \\n        return false;\\n    }\\n\\n    function isSolidified(uint256 tokenId) public view returns (bool) {\\n        Account memory account = accounts[tokenId];\\n        uint256 vouchDate = vouches[account.voucher].vouches[tokenId].vouchDate;\\n\\n        bool isPending = vouchDate == 0 || block.timestamp <= vouchDate + PENDING_PERIOD;\\n        return !isPending && account.valid;\\n    }\\n\\n    function tokenIdOf(address owner) external view returns(uint256){\\n        return _tokenIdOf(owner);\\n    }\\n\\n    function _tokenIdOf(address owner) internal view returns(uint256){\\n        return owned[owner];\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256 balance) {\\n        return _balanceOf(account);\\n    }\\n\\n    function _balanceOf(address account) internal view returns (uint256 balance) {\\n        uint256 tokenId = _tokenIdOf(account);\\n        return tokenId != 0 && accounts[tokenId].valid ? 1 : 0;\\n    }\\n\\n    function ownerOf(uint256 tokenId) external view override returns (address owner) {\\n        return _ownerOf(tokenId); \\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view returns (address owner) {\\n        return accounts[tokenId].account; \\n    }\\n\\n    function getChallenge(uint256 tokenId) external view returns (uint256 creationDate, uint256 endDate, int8 lastOutcome, uint256 nVoted, uint256 nFor, bool executed) {\\n        uint256 challengeIndex = accounts[tokenId].timesChallenged;\\n        return this.getSpecificChallenge(tokenId, challengeIndex);\\n    }\\n\\n    function getChallengeVote(uint256 tokenId, uint256 voterTokenId) external view returns (int8) {\\n        uint256 challengeIndex = accounts[tokenId].timesChallenged;\\n        return this.getSpecificChallengeVote(tokenId, voterTokenId, challengeIndex);\\n    }\\n\\n    function getSpecificChallenge(uint256 tokenId, uint256 challengeIndex) external view returns (uint256 creationDate, uint256 endDate, int8 lastOutcome, uint256 nVoted, uint256 nFor, bool executed) {\\n        Challenge storage _challenge = challenges[tokenId][challengeIndex];\\n        return (_challenge.creationDate, _challenge.endDate, _challenge.lastOutcome, _challenge.nVoted, _challenge.nFor, _challenge.executed);\\n    }\\n\\n    function getSpecificChallengeVote(uint256 tokenId, uint256 voterTokenId, uint256 challengeIndex) external view returns (int8) {\\n        Challenge storage _challenge = challenges[tokenId][challengeIndex];\\n        return _challenge.votes[voterTokenId];\\n    }\\n\\n    function getVoucherVouchesNumber(uint256 voucherTokenId) public view returns (uint256) {\\n        Vouches storage _vouches = vouches[voucherTokenId];\\n        return _vouches.number;\\n    }\\n\\n    function getTokenVouch(uint256 tokenId) public view returns (Vouch memory) {\\n        uint256 voucher = accounts[tokenId].voucher;\\n        return vouches[voucher].vouches[tokenId];\\n    }\\n\\n    function getAccount(uint256 tokenId) public view returns (Account memory) {\\n        return accounts[tokenId];\\n    }\\n\\n    function nextTokenId() internal returns (uint256) {\\n        return ++_nEntries;\\n    }\\n\\n    /***************\\n    INTERNAL FUNCTIONS\\n    ***************/\\n\\n    /** Claiming is always enabled (effectively possible only when a non-zero approved merkleRoot is set) */\\n    function _vouch(uint256 _voucherTokenId, address _account, string memory _personCid) internal {\\n        uint256 _tokenId = nextTokenId();\\n        if(!accounts[_voucherTokenId].valid) revert ErrorVoucherNotValid();\\n        if (owned[_account] != 0) revert AccountAlreadyOwnsOneToken();\\n        \\n        Vouches storage tokenVouches = vouches[_voucherTokenId];\\n        Vouch storage __vouch = tokenVouches.vouches[_tokenId];\\n\\n        /** \\n         * Store the vouch data, validate and store the account data, set the owned mapping and update the \\n         * total number of vouches and entries in the registry\\n         */\\n        __vouch.personCid = _personCid;\\n        __vouch.vouchDate = block.timestamp;\\n\\n        accounts[_tokenId].account = _account;\\n        accounts[_tokenId].voucher = _voucherTokenId;\\n        accounts[_tokenId].valid = true;\\n\\n        owned[_account] = _tokenId;\\n\\n        tokenVouches.number += 1;\\n        __totalSupply += 1;\\n\\n        emit Transfer(address(0), _account, _tokenId);\\n        emit VouchEvent(_voucherTokenId, _tokenId, _personCid);\\n    }\\n\\n    function _invalidateAccount(uint256 tokenId) internal {\\n        Account storage account = accounts[tokenId];\\n\\n        if (!account.valid) revert ErrorAccountNotValid();\\n        \\n        /** \\n         * invalidate and remove the one-to-one relationship\\n         * between the accounts and the owned mappings\\n         */\\n        account.valid = false;\\n        \\n        owned[account.account] = 0;\\n        account.account = address(0);\\n\\n        /** decrease the number of valid members of the circle */\\n        vouches[account.voucher].number -= 1;\\n        /** decrease the number of total entries in the registry */\\n        __totalSupply -= 1;\\n\\n        emit InvalidatedAccountEvent(tokenId);\\n    }\\n\\n    function _executeVote(Challenge storage _challenge, uint256 _tokenId) internal {\\n        bool executed = false;\\n        uint256 activeRatio = 0;\\n        uint256 relRatio = 0;\\n\\n        /** \\n         * keep track of outcome changes, if outcome changed recently,\\n         * extend the voting period\\n         */\\n        if (_challenge.nVoted > 0) {\\n            relRatio = _challenge.nFor.mul(uint256(1e18).div(_challenge.nVoted.mul(1e18)));\\n        }\\n\\n        int8 currentOutcome = relRatio >= 0.5e18 ? int8(1) : int8(-1);\\n        \\n        /** Initialize the lastoutcome */\\n        if (_challenge.lastOutcome != currentOutcome) {\\n            _challenge.lastOutcome = currentOutcome;\\n            \\n            uint256 timeRemaining = _challenge.endDate - block.timestamp;\\n\\n            if(timeRemaining < QUIET_ENDING_PERIOD) {\\n                uint256 newEndDate = _challenge.endDate + (QUIET_ENDING_PERIOD - timeRemaining);\\n                emit VotingPeriodExtendedEvent(newEndDate);\\n                _challenge.endDate = newEndDate;\\n            }\\n        }\\n\\n        /** if challenge still pending */\\n        if (block.timestamp <= _challenge.endDate) {\\n            /** vote period not ended, the challenge is settled with absolute majority */\\n            uint256 totalVoters = getTotalVoters(_tokenId);\\n            activeRatio = _challenge.nFor.mul(uint256(1e18).div(totalVoters.mul(1e18)));\\n        } else {\\n            /** time period ended, the challenge is settled with relative majority */\\n            executed = true;\\n            activeRatio = relRatio;\\n        }\\n\\n        int8 outcome = activeRatio >= 0.5e18 ? int8(1) : int8(-1);\\n\\n        if (outcome == int8(1)) {\\n            executed = true;\\n            emit InvalidatedByChallenge(_tokenId);\\n            _invalidateAccount(_tokenId);\\n        }\\n\\n        if(executed) {\\n            emit ChallengeExecuted(_tokenId, outcome);\\n            _challenge.executed = true;\\n            accounts[_tokenId].timesChallenged++;\\n        }\\n    }\\n\\n    /**\\n     * Votes must be manually invalidated when a voter passes from valid to invalid. Automatic invalidation consume storage and this seems good enough\\n     * A voter should call \\\"vote\\\" to invalidate an account and \\\"_invalidateVote\\\" on all the open challenges of the recently invalidated account.\\n     */\\n    function _invalidateVote(uint256 tokenId, Challenge storage _challenge, uint256 voterTokenId) internal {\\n        if(_challenge.votes[voterTokenId] == 0) revert ErrorVoteNotFound();\\n        if(accounts[voterTokenId].valid) revert ErrorVoterValid();\\n\\n        /** decrease the total number of voters */\\n        _challenge.nVoted -= 1;\\n\\n        /** delete the positive vote of the invalid voter*/\\n        if (_challenge.votes[voterTokenId] == 1) {\\n            _challenge.nFor -= 1;\\n        }\\n\\n        emit InvalidatedVoteEvent(tokenId, voterTokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {}\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external override {}\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override {}\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external override {}\\n\\n    function approve(address to, uint256 tokenId) external override {}\\n\\n    function setApprovalForAll(address operator, bool approved) external override {}\\n\\n    function getApproved(uint256) external view override returns (address operator) {\\n        return address(0);\\n    }\\n\\n    function isApprovedForAll(address, address) external view override returns (bool) {\\n        return false;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\\n        uint256 voucherTokenId = accounts[tokenId].voucher;\\n        string memory cid = vouches[voucherTokenId].vouches[tokenId].personCid;\\n        return string(abi.encodePacked(baseURI, cid)); \\n    }\\n}\\n\",\"keccak256\":\"0x094b03993234388e64aa7245005e75c6699595b900917516cb4e122cf329b302\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061238e806100206000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c8063773c02d411610130578063b88d4fde116100b8578063e985e9c51161007c578063e985e9c5146105a1578063ee650248146105b7578063ef233c0b146105ca578063f98a4eca146105dd578063fe131778146105f057600080fd5b8063b88d4fde14610496578063c87b56dd146104ab578063ce88b145146104be578063d61255f31461057b578063d9eeebed1461058e57600080fd5b806395d89b41116100ff57806395d89b41146104505780639a48962014610458578063a22cb4651461046b578063ab82d9a014610479578063b1610d7e1461048c57600080fd5b8063773c02d4146103fa57806382c0833b1461040d57806384864be714610420578063912dac061461042a57600080fd5b80632333bc72116101be57806343d3a4c11161018257806343d3a4c11461038e5780635d1f0a31146103a15780635e3bee73146103c15780636352211e146103d457806370a08231146103e757600080fd5b80632333bc721461034c57806323b872dd1461035f5780633c823b6b146103725780633fb1a8361461037b57806342842e0e1461035f57600080fd5b80630c104878116102055780630c104878146102af578063130a8d80146102c2578063173ac141146102e257806318160ddd146102f95780631bdd4b741461030157600080fd5b806301ffc9a71461023757806306fdde0314610260578063081812fc14610275578063095ea7b31461029b575b600080fd5b61024b610245366004611ed9565b50600090565b60405190151581526020015b60405180910390f35b6102686105fa565b6040516102579190612175565b61028361024536600461202e565b6040516001600160a01b039091168152602001610257565b6102ad6102a9366004611eaf565b5050565b005b6102ad6102bd366004611e5c565b61068c565b6102d56102d036600461202e565b6106f7565b6040516102579190612188565b6102eb60085481565b604051908152602001610257565b6102eb6107e4565b61031461030f36600461202e565b6107f4565b60408051968752602087019590955260009390930b9385019390935260608401526080830191909152151560a082015260c001610257565b6102ad61035a366004611f20565b61089c565b6102ad61036d366004611d7a565b505050565b6102eb60001981565b61026861038936600461202e565b610a80565b6102eb61039c36600461202e565b610b43565b6102eb6103af36600461202e565b60009081526003602052604090205490565b6103146103cf36600461206c565b610b87565b6102836103e236600461202e565b610bff565b6102eb6103f5366004611d2c565b610c1e565b6102eb610408366004611d2c565b610c29565b61024b61041b36600461202e565b610c47565b6102eb6202a30081565b61043d6104383660046120ee565b610cdb565b60405160009190910b8152602001610257565b610268610d2b565b6102ad61046636600461202e565b610d3a565b6102ad6102a9366004611e25565b6102ad61048736600461202e565b610dab565b6102eb6213c68081565b6102ad6104a4366004611db6565b5050505050565b6102686104b936600461202e565b610eaf565b61053d6104cc36600461202e565b6040805160808082018352600080835260208084018290528385018290526060938401829052948152600485528390208351918201845280546001600160a01b03168252600181015494820194909452600284015460ff161515928101929092526003909201549181019190915290565b604051610257919081516001600160a01b03168152602080830151908201526040808301511515908201526060918201519181019190915260800190565b61043d61058936600461206c565b610fb5565b6102ad61059c36600461206c565b611046565b61024b6105af366004611d47565b600092915050565b6102ad6105c5366004612047565b61105e565b61024b6105d836600461206c565b61120e565b6102ad6105eb36600461202e565b6112c3565b6102eb62ed4e0081565b6060600280546106099061226a565b80601f01602080910402602001604051908101604052809291908181526020018280546106359061226a565b80156106825780601f1061065757610100808354040283529160200191610682565b820191906000526020600020905b81548152906001019060200180831161066557829003601f168201915b5050505050905090565b60006106ae335b6001600160a01b031660009081526005602052604090205490565b90506106f1818585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112da92505050565b50505050565b60408051808201825260608152600060208083018290528482526004815283822060019081015480845260038352858420878552909101909152908390208351808501909452805492939192829082906107509061226a565b80601f016020809104026020016040519081016040528092919081815260200182805461077c9061226a565b80156107c95780601f1061079e576101008083540402835291602001916107c9565b820191906000526020600020905b8154815290600101906020018083116107ac57829003601f168201915b50505050508152602001600182015481525050915050919050565b60006107ef60075490565b905090565b6000818152600460208190526040808320600301549051635e3bee7360e01b815291820184905260248201819052829182918291829182913090635e3bee739060440160c06040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610887919061208e565b949d939c50919a509850965090945092505050565b600054610100900460ff16158080156108bc5750600054600160ff909116105b806108d65750303b1580156108d6575060005460ff166001145b61093e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610961576000805461ff0019166101001790555b8451610974906001906020880190611b27565b508351610988906002906020870190611b27565b506000600781905560088190555b83518160ff161015610a3357600019600081905260046020527fd8c80a9840ed58f33f2186a8fbc29ecd8c3610d196f1da047301bd51988eb95e805460ff191660011790558451610a219190869060ff85169081106109f7576109f761230c565b6020026020010151858460ff1681518110610a1457610a1461230c565b60200260200101516112da565b80610a2b816122c0565b915050610996565b5080156104a4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60008181526004602090815260408083206001908101548085526003845282852086865290910190925290912080546060929190610abd9061226a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae99061226a565b8015610b365780601f10610b0b57610100808354040283529160200191610b36565b820191906000526020600020905b815481529060010190602001808311610b1957829003601f168201915b5050505050915050919050565b600081815260046020908152604080832060010154808452600390925282208054600019831415610b7f578154610b7c90600190612227565b90505b949350505050565b6000806000806000806000600660008a81526020019081526020016000208881548110610bb657610bb661230c565b600091825260208220600691909102016001810154600282015482546004840154600590940154929e919d50610100810490940b9b50919950975060ff90911695509350505050565b6000818152600460205260408120546001600160a01b03165b92915050565b6000610c188261147e565b6001600160a01b038116600090815260056020526040812054610c18565b6000818152600460209081526040808320815160808101835281546001600160a01b03168152600180830154828601819052600284015460ff16151583860152600393840154606084015286529184528285208686528201909352908320015482811580610cc15750610cbd62ed4e008361220f565b4211155b905080158015610cd2575082604001515b95945050505050565b6000838152600660205260408120805482919084908110610cfe57610cfe61230c565b6000918252602080832087845260036006909302019190910190526040812054900b9150505b9392505050565b6060600180546106099061226a565b6000818152600460205260408082206001015480835291206002015460ff1615610d77576040516306425d3f60e21b815260040160405180910390fd5b60405182907f946ccf7529d18d55b60565307325eaa52971532b461c039424db6a003d5791d690600090a26102a9826114cf565b610db481610c47565b15610dd257604051631994e32160e31b815260040160405180910390fd5b60008181526004602052604090206002015460ff16610e0457604051633c1391fd60e11b815260040160405180910390fd5b6000610e0f826115a9565b600181015490915015610e355760405163d92060f360e01b815260040160405180910390fd5b805460ff1615610e5857604051634dc137dd60e11b815260040160405180910390fd5b4260018201819055610e6e906213c6809061220f565b6002820155805461ff00191661ff0017815560405182907ffb4749a8bf40d9d3f0fbe28026fedbe06dc90952eba3759c2b3ec0a7d5697f3190600090a25050565b600081815260046020908152604080832060019081015480855260038452828520868652909101909252822080546060939190610eeb9061226a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f179061226a565b8015610f645780601f10610f3957610100808354040283529160200191610f64565b820191906000526020600020905b815481529060010190602001808311610f4757829003601f168201915b5050505050905060405180604001604052806007815260200166697066733a2f2f60c81b81525081604051602001610f9d929190612146565b60405160208183030381529060405292505050919050565b6000828152600460208190526040808320600301549051634896d60360e11b8152918201859052602482018490526044820181905290309063912dac069060640160206040518083038186803b15801561100e57600080fd5b505afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190611f03565b6000611051836115a9565b905061036d838284611628565b600061106933610693565b90506000611076846115a9565b905080600101546000141561109e57604051631eb4f4e760e01b815260040160405180910390fd5b805460ff16156110c157604051630a23827760e11b815260040160405180910390fd5b80600201544211156110e6576040516335c84aeb60e21b815260040160405180910390fd5b6110f0828561120e565b61110d57604051637cd1a64960e11b815260040160405180910390fd5b6000828152600382016020526040812054810b900b1561114057604051638601a09560e01b815260040160405180910390fd5b8260000b60011461115357600019611156565b60015b60008381526003830160205260408120805492820b60ff1660ff19909316929092179091556004820180546001929061119090849061220f565b90915550506001600084900b146111a85760006111ab565b60015b60ff168160050160008282546111c1919061220f565b909155505060408051858152600085900b602082015283917fbdc899ff9789426dec6b3c3bc128ed8cc0a9b248c274dd93cfdb3709e5a2125e910160405180910390a26106f18185611711565b60008183141561122057506000610c18565b8261122d57506000610c18565b6000828152600460205260408082206001015480835291206002015460ff166112695760405163b0b9da2d60e01b815260040160405180910390fd5b60008481526004602052604081206001015482148061128757508185145b60008681526004602052604090206002015490915060ff1680156112a85750805b156112b857600192505050610c18565b506000949350505050565b60006112ce826115a9565b90506102a98183611711565b60006112e461195b565b60008581526004602052604090206002015490915060ff166113195760405163119ab1c960e11b815260040160405180910390fd5b6001600160a01b038316600090815260056020526040902054156113505760405163cb502ef160e01b815260040160405180910390fd5b600084815260036020908152604080832084845260018101835292208451909161137e918391870190611b27565b5042600182810191909155600084815260046020908152604080832080546001600160a01b0319166001600160a01b038b1690811782558186018c90556002909101805460ff19168617905583526005909152812085905583548491906113e690849061220f565b92505081905550600160076000828254611400919061220f565b909155505060405183906001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a482867fcd7f391a9646e0ab41ec2096f1d380febcdd775905c957ec790ab3738f9fdd788660405161146e9190612175565b60405180910390a3505050505050565b6001600160a01b03811660009081526005602052604081205480158015906114b7575060008181526004602052604090206002015460ff165b6114c25760006114c5565b60015b60ff169392505050565b6000818152600460205260409020600281015460ff16611502576040516392c9b59960e01b815260040160405180910390fd5b60028101805460ff1916905580546001600160a01b0316600090815260056020908152604080832083905583546001600160a01b031916845560018085015484526003909252822080549192909161155b908490612227565b925050819055506001600760008282546115759190612227565b909155505060405182907f8401ed0b52520270ffba65c5383931fc1c6e30b27e1fc692d871d4f669d1f1ea90600090a25050565b6000818152600460205260408120600301546115c681600161220f565b600084815260066020526040902054146115f25760008381526006602052604081208054600101815590525b60008381526006602052604090208054829081106116125761161261230c565b9060005260206000209060060201915050919050565b6000818152600383016020526040812054810b900b61165a576040516359dc302960e01b815260040160405180910390fd5b60008181526004602052604090206002015460ff161561168d57604051635c2a53c560e11b815260040160405180910390fd5b60018260040160008282546116a29190612227565b90915550506000818152600383016020526040812054810b900b600114156116df5760018260050160008282546116d99190612227565b90915550505b604051819084907f6a5de386c49c7e87d450f082eace65d7329e7123bdf11460295f7747adad110590600090a3505050565b6000806000808560040154111561176457611761611756611747670de0b6b3a7640000886004015461197690919063ffffffff16565b670de0b6b3a764000090611982565b600587015490611976565b90505b60006706f05b59d3b2000082101561177e57600019611781565b60015b8654909150600082810b610100909204810b900b14611833578554600082810b60ff166101000261ff001990921691909117875560028701546117c5904290612227565b90506202a3008110156118315760006117e1826202a300612227565b88600201546117f0919061220f565b90507f5073bec5c188828181e51012e5967fbdac7312bd400b8120cf3dcb0b8ee0f11e8160405161182391815260200190565b60405180910390a160028801555b505b8560020154421161187657600061184986610b43565b905061186e61186361174783670de0b6b3a7640000611976565b600589015490611976565b93505061187e565b600193508192505b60006706f05b59d3b200008410156118985760001961189b565b60015b9050600081900b600114156118e2576040516001955086907fa3b99cec0cd3a7ee24ec2a54714e340cc9a7116aa4b0ff7730371682cb47f58090600090a26118e2866114cf565b84156119525760408051878152600083900b60208201527f4e4d413658c729b8cf2dee49da9d98754c99a09654d209ce00244648febc1e54910160405180910390a1865460ff19166001178755600086815260046020526040812060030180549161194c836122a5565b91905055505b50505050505050565b600060086000815461196c906122a5565b9182905550919050565b6000610d248383611997565b6000610d2483670de0b6b3a764000084611a59565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106119db5760405163698d9a0160e11b815260048101829052602401610935565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff811182611a155780670de0b6b3a7640000850401945050505050610c18565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600080806000198587098587029250828110838203039150508060001415611a9457838281611a8a57611a8a6122f6565b0492505050610d24565b838110611abe57604051631dcf306360e21b81526004810182905260248101859052604401610935565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b828054611b339061226a565b90600052602060002090601f016020900481019282611b555760008555611b9b565b82601f10611b6e57805160ff1916838001178555611b9b565b82800160010185558215611b9b579182015b82811115611b9b578251825591602001919060010190611b80565b50611ba7929150611bab565b5090565b5b80821115611ba75760008155600101611bac565b80356001600160a01b0381168114611bd757600080fd5b919050565b600082601f830112611bed57600080fd5b81356020611c02611bfd836121eb565b6121ba565b80838252828201915082860187848660051b8901011115611c2257600080fd5b6000805b86811015611c6557823567ffffffffffffffff811115611c44578283fd5b611c528b88838d0101611cbc565b8652509385019391850191600101611c26565b509198975050505050505050565b60008083601f840112611c8557600080fd5b50813567ffffffffffffffff811115611c9d57600080fd5b602083019150836020828501011115611cb557600080fd5b9250929050565b600082601f830112611ccd57600080fd5b813567ffffffffffffffff811115611ce757611ce7612322565b611cfa601f8201601f19166020016121ba565b818152846020838601011115611d0f57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611d3e57600080fd5b610d2482611bc0565b60008060408385031215611d5a57600080fd5b611d6383611bc0565b9150611d7160208401611bc0565b90509250929050565b600080600060608486031215611d8f57600080fd5b611d9884611bc0565b9250611da660208501611bc0565b9150604084013590509250925092565b600080600080600060808688031215611dce57600080fd5b611dd786611bc0565b9450611de560208701611bc0565b935060408601359250606086013567ffffffffffffffff811115611e0857600080fd5b611e1488828901611c73565b969995985093965092949392505050565b60008060408385031215611e3857600080fd5b611e4183611bc0565b91506020830135611e5181612338565b809150509250929050565b600080600060408486031215611e7157600080fd5b611e7a84611bc0565b9250602084013567ffffffffffffffff811115611e9657600080fd5b611ea286828701611c73565b9497909650939450505050565b60008060408385031215611ec257600080fd5b611ecb83611bc0565b946020939093013593505050565b600060208284031215611eeb57600080fd5b81356001600160e01b031981168114610d2457600080fd5b600060208284031215611f1557600080fd5b8151610d2481612349565b60008060008060808587031215611f3657600080fd5b843567ffffffffffffffff80821115611f4e57600080fd5b611f5a88838901611cbc565b9550602091508187013581811115611f7157600080fd5b611f7d89828a01611cbc565b955050604087013581811115611f9257600080fd5b8701601f81018913611fa357600080fd5b8035611fb1611bfd826121eb565b8082825285820191508584018c878560051b8701011115611fd157600080fd5b600094505b83851015611ffb57611fe781611bc0565b835260019490940193918601918601611fd6565b509650505050606087013591508082111561201557600080fd5b5061202287828801611bdc565b91505092959194509250565b60006020828403121561204057600080fd5b5035919050565b6000806040838503121561205a57600080fd5b823591506020830135611e5181612349565b6000806040838503121561207f57600080fd5b50508035926020909101359150565b60008060008060008060c087890312156120a757600080fd5b865195506020870151945060408701516120c081612349565b80945050606087015192506080870151915060a08701516120e081612338565b809150509295509295509295565b60008060006060848603121561210357600080fd5b505081359360208301359350604090920135919050565b6000815180845261213281602086016020860161223e565b601f01601f19169290920160200192915050565b6000835161215881846020880161223e565b83519083019061216c81836020880161223e565b01949350505050565b602081526000610d24602083018461211a565b6020815260008251604060208401526121a4606084018261211a565b9050602084015160408401528091505092915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156121e3576121e3612322565b604052919050565b600067ffffffffffffffff82111561220557612205612322565b5060051b60200190565b60008219821115612222576122226122e0565b500190565b600082821015612239576122396122e0565b500390565b60005b83811015612259578181015183820152602001612241565b838111156106f15750506000910152565b600181811c9082168061227e57607f821691505b6020821081141561229f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122b9576122b96122e0565b5060010190565b600060ff821660ff8114156122d7576122d76122e0565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461234657600080fd5b50565b8060000b811461234657600080fdfea264697066735822122065bb9f252b43b1b856e38db1ebdb660713a1120a0a8287609f311e94a946c4bc64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c8063773c02d411610130578063b88d4fde116100b8578063e985e9c51161007c578063e985e9c5146105a1578063ee650248146105b7578063ef233c0b146105ca578063f98a4eca146105dd578063fe131778146105f057600080fd5b8063b88d4fde14610496578063c87b56dd146104ab578063ce88b145146104be578063d61255f31461057b578063d9eeebed1461058e57600080fd5b806395d89b41116100ff57806395d89b41146104505780639a48962014610458578063a22cb4651461046b578063ab82d9a014610479578063b1610d7e1461048c57600080fd5b8063773c02d4146103fa57806382c0833b1461040d57806384864be714610420578063912dac061461042a57600080fd5b80632333bc72116101be57806343d3a4c11161018257806343d3a4c11461038e5780635d1f0a31146103a15780635e3bee73146103c15780636352211e146103d457806370a08231146103e757600080fd5b80632333bc721461034c57806323b872dd1461035f5780633c823b6b146103725780633fb1a8361461037b57806342842e0e1461035f57600080fd5b80630c104878116102055780630c104878146102af578063130a8d80146102c2578063173ac141146102e257806318160ddd146102f95780631bdd4b741461030157600080fd5b806301ffc9a71461023757806306fdde0314610260578063081812fc14610275578063095ea7b31461029b575b600080fd5b61024b610245366004611ed9565b50600090565b60405190151581526020015b60405180910390f35b6102686105fa565b6040516102579190612175565b61028361024536600461202e565b6040516001600160a01b039091168152602001610257565b6102ad6102a9366004611eaf565b5050565b005b6102ad6102bd366004611e5c565b61068c565b6102d56102d036600461202e565b6106f7565b6040516102579190612188565b6102eb60085481565b604051908152602001610257565b6102eb6107e4565b61031461030f36600461202e565b6107f4565b60408051968752602087019590955260009390930b9385019390935260608401526080830191909152151560a082015260c001610257565b6102ad61035a366004611f20565b61089c565b6102ad61036d366004611d7a565b505050565b6102eb60001981565b61026861038936600461202e565b610a80565b6102eb61039c36600461202e565b610b43565b6102eb6103af36600461202e565b60009081526003602052604090205490565b6103146103cf36600461206c565b610b87565b6102836103e236600461202e565b610bff565b6102eb6103f5366004611d2c565b610c1e565b6102eb610408366004611d2c565b610c29565b61024b61041b36600461202e565b610c47565b6102eb6202a30081565b61043d6104383660046120ee565b610cdb565b60405160009190910b8152602001610257565b610268610d2b565b6102ad61046636600461202e565b610d3a565b6102ad6102a9366004611e25565b6102ad61048736600461202e565b610dab565b6102eb6213c68081565b6102ad6104a4366004611db6565b5050505050565b6102686104b936600461202e565b610eaf565b61053d6104cc36600461202e565b6040805160808082018352600080835260208084018290528385018290526060938401829052948152600485528390208351918201845280546001600160a01b03168252600181015494820194909452600284015460ff161515928101929092526003909201549181019190915290565b604051610257919081516001600160a01b03168152602080830151908201526040808301511515908201526060918201519181019190915260800190565b61043d61058936600461206c565b610fb5565b6102ad61059c36600461206c565b611046565b61024b6105af366004611d47565b600092915050565b6102ad6105c5366004612047565b61105e565b61024b6105d836600461206c565b61120e565b6102ad6105eb36600461202e565b6112c3565b6102eb62ed4e0081565b6060600280546106099061226a565b80601f01602080910402602001604051908101604052809291908181526020018280546106359061226a565b80156106825780601f1061065757610100808354040283529160200191610682565b820191906000526020600020905b81548152906001019060200180831161066557829003601f168201915b5050505050905090565b60006106ae335b6001600160a01b031660009081526005602052604090205490565b90506106f1818585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112da92505050565b50505050565b60408051808201825260608152600060208083018290528482526004815283822060019081015480845260038352858420878552909101909152908390208351808501909452805492939192829082906107509061226a565b80601f016020809104026020016040519081016040528092919081815260200182805461077c9061226a565b80156107c95780601f1061079e576101008083540402835291602001916107c9565b820191906000526020600020905b8154815290600101906020018083116107ac57829003601f168201915b50505050508152602001600182015481525050915050919050565b60006107ef60075490565b905090565b6000818152600460208190526040808320600301549051635e3bee7360e01b815291820184905260248201819052829182918291829182913090635e3bee739060440160c06040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610887919061208e565b949d939c50919a509850965090945092505050565b600054610100900460ff16158080156108bc5750600054600160ff909116105b806108d65750303b1580156108d6575060005460ff166001145b61093e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610961576000805461ff0019166101001790555b8451610974906001906020880190611b27565b508351610988906002906020870190611b27565b506000600781905560088190555b83518160ff161015610a3357600019600081905260046020527fd8c80a9840ed58f33f2186a8fbc29ecd8c3610d196f1da047301bd51988eb95e805460ff191660011790558451610a219190869060ff85169081106109f7576109f761230c565b6020026020010151858460ff1681518110610a1457610a1461230c565b60200260200101516112da565b80610a2b816122c0565b915050610996565b5080156104a4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60008181526004602090815260408083206001908101548085526003845282852086865290910190925290912080546060929190610abd9061226a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae99061226a565b8015610b365780601f10610b0b57610100808354040283529160200191610b36565b820191906000526020600020905b815481529060010190602001808311610b1957829003601f168201915b5050505050915050919050565b600081815260046020908152604080832060010154808452600390925282208054600019831415610b7f578154610b7c90600190612227565b90505b949350505050565b6000806000806000806000600660008a81526020019081526020016000208881548110610bb657610bb661230c565b600091825260208220600691909102016001810154600282015482546004840154600590940154929e919d50610100810490940b9b50919950975060ff90911695509350505050565b6000818152600460205260408120546001600160a01b03165b92915050565b6000610c188261147e565b6001600160a01b038116600090815260056020526040812054610c18565b6000818152600460209081526040808320815160808101835281546001600160a01b03168152600180830154828601819052600284015460ff16151583860152600393840154606084015286529184528285208686528201909352908320015482811580610cc15750610cbd62ed4e008361220f565b4211155b905080158015610cd2575082604001515b95945050505050565b6000838152600660205260408120805482919084908110610cfe57610cfe61230c565b6000918252602080832087845260036006909302019190910190526040812054900b9150505b9392505050565b6060600180546106099061226a565b6000818152600460205260408082206001015480835291206002015460ff1615610d77576040516306425d3f60e21b815260040160405180910390fd5b60405182907f946ccf7529d18d55b60565307325eaa52971532b461c039424db6a003d5791d690600090a26102a9826114cf565b610db481610c47565b15610dd257604051631994e32160e31b815260040160405180910390fd5b60008181526004602052604090206002015460ff16610e0457604051633c1391fd60e11b815260040160405180910390fd5b6000610e0f826115a9565b600181015490915015610e355760405163d92060f360e01b815260040160405180910390fd5b805460ff1615610e5857604051634dc137dd60e11b815260040160405180910390fd5b4260018201819055610e6e906213c6809061220f565b6002820155805461ff00191661ff0017815560405182907ffb4749a8bf40d9d3f0fbe28026fedbe06dc90952eba3759c2b3ec0a7d5697f3190600090a25050565b600081815260046020908152604080832060019081015480855260038452828520868652909101909252822080546060939190610eeb9061226a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f179061226a565b8015610f645780601f10610f3957610100808354040283529160200191610f64565b820191906000526020600020905b815481529060010190602001808311610f4757829003601f168201915b5050505050905060405180604001604052806007815260200166697066733a2f2f60c81b81525081604051602001610f9d929190612146565b60405160208183030381529060405292505050919050565b6000828152600460208190526040808320600301549051634896d60360e11b8152918201859052602482018490526044820181905290309063912dac069060640160206040518083038186803b15801561100e57600080fd5b505afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190611f03565b6000611051836115a9565b905061036d838284611628565b600061106933610693565b90506000611076846115a9565b905080600101546000141561109e57604051631eb4f4e760e01b815260040160405180910390fd5b805460ff16156110c157604051630a23827760e11b815260040160405180910390fd5b80600201544211156110e6576040516335c84aeb60e21b815260040160405180910390fd5b6110f0828561120e565b61110d57604051637cd1a64960e11b815260040160405180910390fd5b6000828152600382016020526040812054810b900b1561114057604051638601a09560e01b815260040160405180910390fd5b8260000b60011461115357600019611156565b60015b60008381526003830160205260408120805492820b60ff1660ff19909316929092179091556004820180546001929061119090849061220f565b90915550506001600084900b146111a85760006111ab565b60015b60ff168160050160008282546111c1919061220f565b909155505060408051858152600085900b602082015283917fbdc899ff9789426dec6b3c3bc128ed8cc0a9b248c274dd93cfdb3709e5a2125e910160405180910390a26106f18185611711565b60008183141561122057506000610c18565b8261122d57506000610c18565b6000828152600460205260408082206001015480835291206002015460ff166112695760405163b0b9da2d60e01b815260040160405180910390fd5b60008481526004602052604081206001015482148061128757508185145b60008681526004602052604090206002015490915060ff1680156112a85750805b156112b857600192505050610c18565b506000949350505050565b60006112ce826115a9565b90506102a98183611711565b60006112e461195b565b60008581526004602052604090206002015490915060ff166113195760405163119ab1c960e11b815260040160405180910390fd5b6001600160a01b038316600090815260056020526040902054156113505760405163cb502ef160e01b815260040160405180910390fd5b600084815260036020908152604080832084845260018101835292208451909161137e918391870190611b27565b5042600182810191909155600084815260046020908152604080832080546001600160a01b0319166001600160a01b038b1690811782558186018c90556002909101805460ff19168617905583526005909152812085905583548491906113e690849061220f565b92505081905550600160076000828254611400919061220f565b909155505060405183906001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a482867fcd7f391a9646e0ab41ec2096f1d380febcdd775905c957ec790ab3738f9fdd788660405161146e9190612175565b60405180910390a3505050505050565b6001600160a01b03811660009081526005602052604081205480158015906114b7575060008181526004602052604090206002015460ff165b6114c25760006114c5565b60015b60ff169392505050565b6000818152600460205260409020600281015460ff16611502576040516392c9b59960e01b815260040160405180910390fd5b60028101805460ff1916905580546001600160a01b0316600090815260056020908152604080832083905583546001600160a01b031916845560018085015484526003909252822080549192909161155b908490612227565b925050819055506001600760008282546115759190612227565b909155505060405182907f8401ed0b52520270ffba65c5383931fc1c6e30b27e1fc692d871d4f669d1f1ea90600090a25050565b6000818152600460205260408120600301546115c681600161220f565b600084815260066020526040902054146115f25760008381526006602052604081208054600101815590525b60008381526006602052604090208054829081106116125761161261230c565b9060005260206000209060060201915050919050565b6000818152600383016020526040812054810b900b61165a576040516359dc302960e01b815260040160405180910390fd5b60008181526004602052604090206002015460ff161561168d57604051635c2a53c560e11b815260040160405180910390fd5b60018260040160008282546116a29190612227565b90915550506000818152600383016020526040812054810b900b600114156116df5760018260050160008282546116d99190612227565b90915550505b604051819084907f6a5de386c49c7e87d450f082eace65d7329e7123bdf11460295f7747adad110590600090a3505050565b6000806000808560040154111561176457611761611756611747670de0b6b3a7640000886004015461197690919063ffffffff16565b670de0b6b3a764000090611982565b600587015490611976565b90505b60006706f05b59d3b2000082101561177e57600019611781565b60015b8654909150600082810b610100909204810b900b14611833578554600082810b60ff166101000261ff001990921691909117875560028701546117c5904290612227565b90506202a3008110156118315760006117e1826202a300612227565b88600201546117f0919061220f565b90507f5073bec5c188828181e51012e5967fbdac7312bd400b8120cf3dcb0b8ee0f11e8160405161182391815260200190565b60405180910390a160028801555b505b8560020154421161187657600061184986610b43565b905061186e61186361174783670de0b6b3a7640000611976565b600589015490611976565b93505061187e565b600193508192505b60006706f05b59d3b200008410156118985760001961189b565b60015b9050600081900b600114156118e2576040516001955086907fa3b99cec0cd3a7ee24ec2a54714e340cc9a7116aa4b0ff7730371682cb47f58090600090a26118e2866114cf565b84156119525760408051878152600083900b60208201527f4e4d413658c729b8cf2dee49da9d98754c99a09654d209ce00244648febc1e54910160405180910390a1865460ff19166001178755600086815260046020526040812060030180549161194c836122a5565b91905055505b50505050505050565b600060086000815461196c906122a5565b9182905550919050565b6000610d248383611997565b6000610d2483670de0b6b3a764000084611a59565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106119db5760405163698d9a0160e11b815260048101829052602401610935565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff811182611a155780670de0b6b3a7640000850401945050505050610c18565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600080806000198587098587029250828110838203039150508060001415611a9457838281611a8a57611a8a6122f6565b0492505050610d24565b838110611abe57604051631dcf306360e21b81526004810182905260248101859052604401610935565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b828054611b339061226a565b90600052602060002090601f016020900481019282611b555760008555611b9b565b82601f10611b6e57805160ff1916838001178555611b9b565b82800160010185558215611b9b579182015b82811115611b9b578251825591602001919060010190611b80565b50611ba7929150611bab565b5090565b5b80821115611ba75760008155600101611bac565b80356001600160a01b0381168114611bd757600080fd5b919050565b600082601f830112611bed57600080fd5b81356020611c02611bfd836121eb565b6121ba565b80838252828201915082860187848660051b8901011115611c2257600080fd5b6000805b86811015611c6557823567ffffffffffffffff811115611c44578283fd5b611c528b88838d0101611cbc565b8652509385019391850191600101611c26565b509198975050505050505050565b60008083601f840112611c8557600080fd5b50813567ffffffffffffffff811115611c9d57600080fd5b602083019150836020828501011115611cb557600080fd5b9250929050565b600082601f830112611ccd57600080fd5b813567ffffffffffffffff811115611ce757611ce7612322565b611cfa601f8201601f19166020016121ba565b818152846020838601011115611d0f57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611d3e57600080fd5b610d2482611bc0565b60008060408385031215611d5a57600080fd5b611d6383611bc0565b9150611d7160208401611bc0565b90509250929050565b600080600060608486031215611d8f57600080fd5b611d9884611bc0565b9250611da660208501611bc0565b9150604084013590509250925092565b600080600080600060808688031215611dce57600080fd5b611dd786611bc0565b9450611de560208701611bc0565b935060408601359250606086013567ffffffffffffffff811115611e0857600080fd5b611e1488828901611c73565b969995985093965092949392505050565b60008060408385031215611e3857600080fd5b611e4183611bc0565b91506020830135611e5181612338565b809150509250929050565b600080600060408486031215611e7157600080fd5b611e7a84611bc0565b9250602084013567ffffffffffffffff811115611e9657600080fd5b611ea286828701611c73565b9497909650939450505050565b60008060408385031215611ec257600080fd5b611ecb83611bc0565b946020939093013593505050565b600060208284031215611eeb57600080fd5b81356001600160e01b031981168114610d2457600080fd5b600060208284031215611f1557600080fd5b8151610d2481612349565b60008060008060808587031215611f3657600080fd5b843567ffffffffffffffff80821115611f4e57600080fd5b611f5a88838901611cbc565b9550602091508187013581811115611f7157600080fd5b611f7d89828a01611cbc565b955050604087013581811115611f9257600080fd5b8701601f81018913611fa357600080fd5b8035611fb1611bfd826121eb565b8082825285820191508584018c878560051b8701011115611fd157600080fd5b600094505b83851015611ffb57611fe781611bc0565b835260019490940193918601918601611fd6565b509650505050606087013591508082111561201557600080fd5b5061202287828801611bdc565b91505092959194509250565b60006020828403121561204057600080fd5b5035919050565b6000806040838503121561205a57600080fd5b823591506020830135611e5181612349565b6000806040838503121561207f57600080fd5b50508035926020909101359150565b60008060008060008060c087890312156120a757600080fd5b865195506020870151945060408701516120c081612349565b80945050606087015192506080870151915060a08701516120e081612338565b809150509295509295509295565b60008060006060848603121561210357600080fd5b505081359360208301359350604090920135919050565b6000815180845261213281602086016020860161223e565b601f01601f19169290920160200192915050565b6000835161215881846020880161223e565b83519083019061216c81836020880161223e565b01949350505050565b602081526000610d24602083018461211a565b6020815260008251604060208401526121a4606084018261211a565b9050602084015160408401528091505092915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156121e3576121e3612322565b604052919050565b600067ffffffffffffffff82111561220557612205612322565b5060051b60200190565b60008219821115612222576122226122e0565b500190565b600082821015612239576122396122e0565b500390565b60005b83811015612259578181015183820152602001612241565b838111156106f15750506000910152565b600181811c9082168061227e57607f821691505b6020821081141561229f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122b9576122b96122e0565b5060010190565b600060ff821660ff8114156122d7576122d76122e0565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461234657600080fd5b50565b8060000b811461234657600080fdfea264697066735822122065bb9f252b43b1b856e38db1ebdb660713a1120a0a8287609f311e94a946c4bc64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "title": "Registry",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ErrorAccountSolidified()": [
        {
          "notice": "Errors "
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "canVote(uint256,uint256)": {
        "notice": "A tokenId can vote if - The voter account is valid - AND either - voterTokenId was vouched by voucherTokenId (which is the voucher of the challenged tokenId) - OR the voterTokenId is the voucherTokenId themselves.  The FOUNDERS_VOUCHER can, in theory vote on founders challenges, but no address owns that  token and so no problem "
      },
      "initRegistry(string,string,address[],string[])": {
        "notice": "Constructor "
      },
      "vouch(address,string)": {
        "notice": "The msgSender must be a valid account in the registry and vouch for the provided account and personCid pair"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 86,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 89,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2105,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2107,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2151,
        "contract": "contracts/Registry.sol:Registry",
        "label": "vouches",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Vouches)2120_storage)"
      },
      {
        "astId": 2157,
        "contract": "contracts/Registry.sol:Registry",
        "label": "accounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Account)2129_storage)"
      },
      {
        "astId": 2161,
        "contract": "contracts/Registry.sol:Registry",
        "label": "owned",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2167,
        "contract": "contracts/Registry.sol:Registry",
        "label": "challenges",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_struct(Challenge)2146_storage)dyn_storage)"
      },
      {
        "astId": 2169,
        "contract": "contracts/Registry.sol:Registry",
        "label": "__totalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2171,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_nEntries",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Challenge)2146_storage)dyn_storage": {
        "base": "t_struct(Challenge)2146_storage",
        "encoding": "dynamic_array",
        "label": "struct Registry.Challenge[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Challenge)2146_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Registry.Challenge[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Challenge)2146_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_int8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int8)",
        "numberOfBytes": "32",
        "value": "t_int8"
      },
      "t_mapping(t_uint256,t_struct(Account)2129_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Registry.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)2129_storage"
      },
      "t_mapping(t_uint256,t_struct(Vouch)2112_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Registry.Vouch)",
        "numberOfBytes": "32",
        "value": "t_struct(Vouch)2112_storage"
      },
      "t_mapping(t_uint256,t_struct(Vouches)2120_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Registry.Vouches)",
        "numberOfBytes": "32",
        "value": "t_struct(Vouches)2120_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Account)2129_storage": {
        "encoding": "inplace",
        "label": "struct Registry.Account",
        "members": [
          {
            "astId": 2122,
            "contract": "contracts/Registry.sol:Registry",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2124,
            "contract": "contracts/Registry.sol:Registry",
            "label": "voucher",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2126,
            "contract": "contracts/Registry.sol:Registry",
            "label": "valid",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2128,
            "contract": "contracts/Registry.sol:Registry",
            "label": "timesChallenged",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Challenge)2146_storage": {
        "encoding": "inplace",
        "label": "struct Registry.Challenge",
        "members": [
          {
            "astId": 2131,
            "contract": "contracts/Registry.sol:Registry",
            "label": "executed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2133,
            "contract": "contracts/Registry.sol:Registry",
            "label": "lastOutcome",
            "offset": 1,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 2135,
            "contract": "contracts/Registry.sol:Registry",
            "label": "creationDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2137,
            "contract": "contracts/Registry.sol:Registry",
            "label": "endDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2141,
            "contract": "contracts/Registry.sol:Registry",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_int8)"
          },
          {
            "astId": 2143,
            "contract": "contracts/Registry.sol:Registry",
            "label": "nVoted",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2145,
            "contract": "contracts/Registry.sol:Registry",
            "label": "nFor",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Vouch)2112_storage": {
        "encoding": "inplace",
        "label": "struct Registry.Vouch",
        "members": [
          {
            "astId": 2109,
            "contract": "contracts/Registry.sol:Registry",
            "label": "personCid",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2111,
            "contract": "contracts/Registry.sol:Registry",
            "label": "vouchDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vouches)2120_storage": {
        "encoding": "inplace",
        "label": "struct Registry.Vouches",
        "members": [
          {
            "astId": 2114,
            "contract": "contracts/Registry.sol:Registry",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2119,
            "contract": "contracts/Registry.sol:Registry",
            "label": "vouches",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Vouch)2112_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}