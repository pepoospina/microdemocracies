/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Registry {
  export type AccountStruct = {
    account: string;
    voucher: BigNumberish;
    valid: boolean;
    timesChallenged: BigNumberish;
  };

  export type AccountStructOutput = [string, BigNumber, boolean, BigNumber] & {
    account: string;
    voucher: BigNumber;
    valid: boolean;
    timesChallenged: BigNumber;
  };

  export type VouchStruct = { personCid: string; vouchDate: BigNumberish };

  export type VouchStructOutput = [string, BigNumber] & {
    personCid: string;
    vouchDate: BigNumber;
  };
}

export interface RegistryInterface extends utils.Interface {
  contractName: "Registry";
  functions: {
    "FOUNDERS_VOUCHER()": FunctionFragment;
    "PENDING_PERIOD()": FunctionFragment;
    "QUIET_ENDING_PERIOD()": FunctionFragment;
    "VOTING_PERIOD()": FunctionFragment;
    "_nEntries()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "canVote(uint256,uint256)": FunctionFragment;
    "challenge(uint256)": FunctionFragment;
    "executeVote(uint256)": FunctionFragment;
    "getAccount(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getChallenge(uint256)": FunctionFragment;
    "getChallengeVote(uint256,uint256)": FunctionFragment;
    "getSpecificChallenge(uint256,uint256)": FunctionFragment;
    "getSpecificChallengeVote(uint256,uint256,uint256)": FunctionFragment;
    "getTokenPersonCid(uint256)": FunctionFragment;
    "getTokenVouch(uint256)": FunctionFragment;
    "getTotalVoters(uint256)": FunctionFragment;
    "getVoucherVouchesNumber(uint256)": FunctionFragment;
    "invalidateInvalidVoucher(uint256)": FunctionFragment;
    "invalidateVote(uint256,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isSolidified(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenIdOf(address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vote(uint256,int8)": FunctionFragment;
    "vouch(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FOUNDERS_VOUCHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENDING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUIET_ENDING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_nEntries", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpecificChallenge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpecificChallengeVote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPersonCid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenVouch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherVouchesNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateInvalidVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSolidified",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenIdOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vouch",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FOUNDERS_VOUCHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENDING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUIET_ENDING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_nEntries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpecificChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpecificChallengeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPersonCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenVouch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherVouchesNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateInvalidVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSolidified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIdOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vouch", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ChallengeEvent(uint256)": EventFragment;
    "ChallengeExecuted(uint256,int8)": EventFragment;
    "InvalidatedAccountEvent(uint256)": EventFragment;
    "InvalidatedByChallenge(uint256)": EventFragment;
    "InvalidatedByInvalidVoucher(uint256)": EventFragment;
    "InvalidatedVoteEvent(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VoteEvent(uint256,uint256,int8)": EventFragment;
    "VotingPeriodExtendedEvent(uint256)": EventFragment;
    "VouchEvent(uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidatedAccountEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidatedByChallenge"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InvalidatedByInvalidVoucher"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidatedVoteEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPeriodExtendedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VouchEvent"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type ChallengeEventEvent = TypedEvent<
  [BigNumber],
  { tokenId: BigNumber }
>;

export type ChallengeEventEventFilter = TypedEventFilter<ChallengeEventEvent>;

export type ChallengeExecutedEvent = TypedEvent<
  [BigNumber, number],
  { tokenId: BigNumber; outcome: number }
>;

export type ChallengeExecutedEventFilter =
  TypedEventFilter<ChallengeExecutedEvent>;

export type InvalidatedAccountEventEvent = TypedEvent<
  [BigNumber],
  { tokenId: BigNumber }
>;

export type InvalidatedAccountEventEventFilter =
  TypedEventFilter<InvalidatedAccountEventEvent>;

export type InvalidatedByChallengeEvent = TypedEvent<
  [BigNumber],
  { tokenId: BigNumber }
>;

export type InvalidatedByChallengeEventFilter =
  TypedEventFilter<InvalidatedByChallengeEvent>;

export type InvalidatedByInvalidVoucherEvent = TypedEvent<
  [BigNumber],
  { tokenId: BigNumber }
>;

export type InvalidatedByInvalidVoucherEventFilter =
  TypedEventFilter<InvalidatedByInvalidVoucherEvent>;

export type InvalidatedVoteEventEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokenId: BigNumber; voterTokenId: BigNumber }
>;

export type InvalidatedVoteEventEventFilter =
  TypedEventFilter<InvalidatedVoteEventEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type VoteEventEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  { voterTokenId: BigNumber; tokenId: BigNumber; vote: number }
>;

export type VoteEventEventFilter = TypedEventFilter<VoteEventEvent>;

export type VotingPeriodExtendedEventEvent = TypedEvent<
  [BigNumber],
  { newEndDate: BigNumber }
>;

export type VotingPeriodExtendedEventEventFilter =
  TypedEventFilter<VotingPeriodExtendedEventEvent>;

export type VouchEventEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { from: BigNumber; to: BigNumber; personCid: string }
>;

export type VouchEventEventFilter = TypedEventFilter<VouchEventEvent>;

export interface Registry extends BaseContract {
  contractName: "Registry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FOUNDERS_VOUCHER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PENDING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    QUIET_ENDING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    _nEntries(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    canVote(
      voterTokenId: BigNumberish,
      challengedTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    challenge(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeVote(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccount(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Registry.AccountStructOutput]>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { operator: string }>;

    getChallenge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber, boolean] & {
        creationDate: BigNumber;
        endDate: BigNumber;
        lastOutcome: number;
        nVoted: BigNumber;
        nFor: BigNumber;
        executed: boolean;
      }
    >;

    getChallengeVote(
      tokenId: BigNumberish,
      voterTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSpecificChallenge(
      tokenId: BigNumberish,
      challengeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber, boolean] & {
        creationDate: BigNumber;
        endDate: BigNumber;
        lastOutcome: number;
        nVoted: BigNumber;
        nFor: BigNumber;
        executed: boolean;
      }
    >;

    getSpecificChallengeVote(
      tokenId: BigNumberish,
      voterTokenId: BigNumberish,
      challengeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTokenPersonCid(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenVouch(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Registry.VouchStructOutput]>;

    getTotalVoters(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoucherVouchesNumber(
      voucherTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invalidateInvalidVoucher(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invalidateVote(
      _tokenId: BigNumberish,
      _voterTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSolidified(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenIdOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      _tokenId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vouch(
      account: string,
      personCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FOUNDERS_VOUCHER(overrides?: CallOverrides): Promise<BigNumber>;

  PENDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  QUIET_ENDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  _nEntries(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  canVote(
    voterTokenId: BigNumberish,
    challengedTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  challenge(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeVote(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccount(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Registry.AccountStructOutput>;

  getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getChallenge(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber, BigNumber, boolean] & {
      creationDate: BigNumber;
      endDate: BigNumber;
      lastOutcome: number;
      nVoted: BigNumber;
      nFor: BigNumber;
      executed: boolean;
    }
  >;

  getChallengeVote(
    tokenId: BigNumberish,
    voterTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getSpecificChallenge(
    tokenId: BigNumberish,
    challengeIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber, BigNumber, boolean] & {
      creationDate: BigNumber;
      endDate: BigNumber;
      lastOutcome: number;
      nVoted: BigNumber;
      nFor: BigNumber;
      executed: boolean;
    }
  >;

  getSpecificChallengeVote(
    tokenId: BigNumberish,
    voterTokenId: BigNumberish,
    challengeIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getTokenPersonCid(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenVouch(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Registry.VouchStructOutput>;

  getTotalVoters(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoucherVouchesNumber(
    voucherTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invalidateInvalidVoucher(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invalidateVote(
    _tokenId: BigNumberish,
    _voterTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSolidified(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenIdOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    _tokenId: BigNumberish,
    _vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vouch(
    account: string,
    personCid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FOUNDERS_VOUCHER(overrides?: CallOverrides): Promise<BigNumber>;

    PENDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    QUIET_ENDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _nEntries(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    canVote(
      voterTokenId: BigNumberish,
      challengedTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    challenge(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    executeVote(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccount(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Registry.AccountStructOutput>;

    getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getChallenge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber, boolean] & {
        creationDate: BigNumber;
        endDate: BigNumber;
        lastOutcome: number;
        nVoted: BigNumber;
        nFor: BigNumber;
        executed: boolean;
      }
    >;

    getChallengeVote(
      tokenId: BigNumberish,
      voterTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getSpecificChallenge(
      tokenId: BigNumberish,
      challengeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber, boolean] & {
        creationDate: BigNumber;
        endDate: BigNumber;
        lastOutcome: number;
        nVoted: BigNumber;
        nFor: BigNumber;
        executed: boolean;
      }
    >;

    getSpecificChallengeVote(
      tokenId: BigNumberish,
      voterTokenId: BigNumberish,
      challengeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getTokenPersonCid(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenVouch(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Registry.VouchStructOutput>;

    getTotalVoters(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherVouchesNumber(
      voucherTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidateInvalidVoucher(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    invalidateVote(
      _tokenId: BigNumberish,
      _voterTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSolidified(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenIdOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      _tokenId: BigNumberish,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vouch(
      account: string,
      personCid: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ChallengeEvent(uint256)"(
      tokenId?: BigNumberish | null
    ): ChallengeEventEventFilter;
    ChallengeEvent(tokenId?: BigNumberish | null): ChallengeEventEventFilter;

    "ChallengeExecuted(uint256,int8)"(
      tokenId?: null,
      outcome?: null
    ): ChallengeExecutedEventFilter;
    ChallengeExecuted(
      tokenId?: null,
      outcome?: null
    ): ChallengeExecutedEventFilter;

    "InvalidatedAccountEvent(uint256)"(
      tokenId?: BigNumberish | null
    ): InvalidatedAccountEventEventFilter;
    InvalidatedAccountEvent(
      tokenId?: BigNumberish | null
    ): InvalidatedAccountEventEventFilter;

    "InvalidatedByChallenge(uint256)"(
      tokenId?: BigNumberish | null
    ): InvalidatedByChallengeEventFilter;
    InvalidatedByChallenge(
      tokenId?: BigNumberish | null
    ): InvalidatedByChallengeEventFilter;

    "InvalidatedByInvalidVoucher(uint256)"(
      tokenId?: BigNumberish | null
    ): InvalidatedByInvalidVoucherEventFilter;
    InvalidatedByInvalidVoucher(
      tokenId?: BigNumberish | null
    ): InvalidatedByInvalidVoucherEventFilter;

    "InvalidatedVoteEvent(uint256,uint256)"(
      tokenId?: BigNumberish | null,
      voterTokenId?: BigNumberish | null
    ): InvalidatedVoteEventEventFilter;
    InvalidatedVoteEvent(
      tokenId?: BigNumberish | null,
      voterTokenId?: BigNumberish | null
    ): InvalidatedVoteEventEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "VoteEvent(uint256,uint256,int8)"(
      voterTokenId?: BigNumberish | null,
      tokenId?: null,
      vote?: null
    ): VoteEventEventFilter;
    VoteEvent(
      voterTokenId?: BigNumberish | null,
      tokenId?: null,
      vote?: null
    ): VoteEventEventFilter;

    "VotingPeriodExtendedEvent(uint256)"(
      newEndDate?: null
    ): VotingPeriodExtendedEventEventFilter;
    VotingPeriodExtendedEvent(
      newEndDate?: null
    ): VotingPeriodExtendedEventEventFilter;

    "VouchEvent(uint256,uint256,string)"(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      personCid?: null
    ): VouchEventEventFilter;
    VouchEvent(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      personCid?: null
    ): VouchEventEventFilter;
  };

  estimateGas: {
    FOUNDERS_VOUCHER(overrides?: CallOverrides): Promise<BigNumber>;

    PENDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    QUIET_ENDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _nEntries(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    canVote(
      voterTokenId: BigNumberish,
      challengedTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challenge(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeVote(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccount(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChallenge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChallengeVote(
      tokenId: BigNumberish,
      voterTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpecificChallenge(
      tokenId: BigNumberish,
      challengeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpecificChallengeVote(
      tokenId: BigNumberish,
      voterTokenId: BigNumberish,
      challengeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPersonCid(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenVouch(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVoters(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherVouchesNumber(
      voucherTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidateInvalidVoucher(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invalidateVote(
      _tokenId: BigNumberish,
      _voterTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSolidified(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      _tokenId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vouch(
      account: string,
      personCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FOUNDERS_VOUCHER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PENDING_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    QUIET_ENDING_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _nEntries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      voterTokenId: BigNumberish,
      challengedTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challenge(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeVote(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccount(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChallenge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChallengeVote(
      tokenId: BigNumberish,
      voterTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpecificChallenge(
      tokenId: BigNumberish,
      challengeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpecificChallengeVote(
      tokenId: BigNumberish,
      voterTokenId: BigNumberish,
      challengeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPersonCid(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenVouch(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVoters(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherVouchesNumber(
      voucherTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidateInvalidVoucher(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invalidateVote(
      _tokenId: BigNumberish,
      _voterTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSolidified(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _tokenId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vouch(
      account: string,
      personCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
