/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RegistryFactoryInterface extends utils.Interface {
  contractName: "RegistryFactory";
  functions: {
    "contractAddress(bytes32)": FunctionFragment;
    "create(string,string,address[],string[],bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "contractAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [string, string, string[], string[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;

  events: {
    "RegistryCreated(address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegistryCreated"): EventFragment;
}

export type RegistryCreatedEvent = TypedEvent<
  [string, string, string],
  { creator: string; newRegistry: string; salt: string }
>;

export type RegistryCreatedEventFilter = TypedEventFilter<RegistryCreatedEvent>;

export interface RegistryFactory extends BaseContract {
  contractName: "RegistryFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractAddress(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    create(
      __symbol: string,
      __name: string,
      addresses: string[],
      foundersCids: string[],
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  contractAddress(salt: BytesLike, overrides?: CallOverrides): Promise<string>;

  create(
    __symbol: string,
    __name: string,
    addresses: string[],
    foundersCids: string[],
    salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contractAddress(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    create(
      __symbol: string,
      __name: string,
      addresses: string[],
      foundersCids: string[],
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "RegistryCreated(address,address,bytes32)"(
      creator?: null,
      newRegistry?: null,
      salt?: null
    ): RegistryCreatedEventFilter;
    RegistryCreated(
      creator?: null,
      newRegistry?: null,
      salt?: null
    ): RegistryCreatedEventFilter;
  };

  estimateGas: {
    contractAddress(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      __symbol: string,
      __name: string,
      addresses: string[],
      foundersCids: string[],
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractAddress(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      __symbol: string,
      __name: string,
      addresses: string[],
      foundersCids: string[],
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
